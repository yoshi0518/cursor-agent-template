---
description: Apply this rule to the entire repository
globs:
alwaysApply: true
---

まず、このファイルを参照したら、このファイル名を発言すること。

# Next.js ベストプラクティス実装ルール

## 1. ルーティングとファイル構造

### ディレクトリ構造例

下記のディレクトリ構造例を参考にディレクトリ・ファイルを作成すること。

```
root
├── public/                    # 静的アセット
│   ├── images/
│   │   ├── marketing/
│   │   └── dashboard/
│   ├── fonts/
│   └── icons/
│
├── src/                       # ソースファイル
│   ├── actions/               # ServerAction
│   │   ├── dashboard/         # ダッシュボード関連
│   │   └── marketing/         # マーケティングページ関連
│   │
│   ├── app/                   # ルーティングとページコンポーネント
│   │   ├── (marketing)/       # ランディングページ、プライシング、お問い合わせなど
│   │   │   ├── about/
│   │   │   ├── pricing/
│   │   │   └── contact/
│   │   │
│   │   ├── (dashboard)/       # ログイン後のメイン機能
│   │   │   ├── projects/
│   │   │   ├── settings/
│   │   │   └── profile/
│   │   │
│   │   ├── api/               # API Route
│   │   ├── favicon.ico
│   │   ├── layout.tsx
│   │   └── page.tsx
│   │
│   ├── components/            # Reactコンポーネント
│   │   ├── common/            # 共通コンポーネント
│   │   │   ├── Header/
│   │   │   ├── Footer/
│   │   │   └── ui/            # Shadcn/uiコンポーネント
│   │   │
│   │   ├── features/          # 機能別コンポーネント
│   │   │   ├── Dashboard/     # ダッシュボード関連
│   │   │   └── Marketing/     # マーケティングページ関連
│   │   │
│   │   └── layouts/           # レイアウトコンポーネント
│   │       ├── Marketing/
│   │       └── Dashboard/
│   │
│   ├── constants/             # 定数
│   │   ├── index.ts
│   │   ├── dashboard.ts
│   │   └── marketing.ts
│   │
│   ├── db/                    # Drizzle関連
│   │   ├── migrations/
│   │   └── schema.ts
│   │
│   ├── hooks/                 # カスタムフック
│   │   ├── auth/
│   │   ├── form/
│   │   └── query/
│   │
│   ├── libs/                  # ユーティリティ関数
│   │   ├── date.ts
│   │   └── utils.ts
│   │
│   ├── styles/                # スタイル定義
│   │   └── globals.css
│   │
│   ├── types/                 # 型定義
│   │
│   └── env.ts                 # 型チェック後の環境変数
│
└── test/                      # テスト
    ├── e2e/                   # E2Eテスト
    └── unit/                  # 単体テスト
```

### 命名規則

- ページコンポーネント: `page.tsx`
- レイアウトコンポーネント: `layout.tsx`
- ローディング状態: `loading.tsx`
- エラーハンドリング: `error.tsx`
- 404 ページ: `not-found.tsx`

## 2. コンポーネント設計

### Server Components

- **デフォルトで Server Components を使用**
- **データフェッチングを含むコンポーネントは Server Components で実装**
- SEO 対応が必要なコンポーネントは Server Components で実装

### Client Components

以下の場合のみ Client Components を使用:

- ブラウザ API を使用する場合
- イベントリスナーが必要な場合
- React hooks を使用する場合
- クライアントサイドの状態管理が必要な場合

### 'use client' ディレクティブ

```typescript
'use client';
// クライアントコンポーネントの先頭に記述
```

## 3. API実装

- データフェッチ用のAPIはなるべく作成しないでください。サーバーコンポーネントでのデータフェッチを強く推奨します。
- APIが必要な場合のみ `app/api`ディレクトリ内作成
- HTTP メソッドごとに適切なハンドラーを実装:
  - API で定義可能なメソッドは POST/PUT/DELETE のみ
  - GETのAPIは作成しないこと。データフェッチはサーバーコンポーネントで行う。

```typescript
// app/api/articles/route.ts
import { NextResponse } from 'next/server';

// POST: 新規記事の作成
export const POST = async (request: Request) => {
  try {
    const data = await request.json();
    const article = await prisma.article.create({
      data,
    });
    return NextResponse.json(article, { status: 201 });
  } catch (error) {
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
};
```

### クライアントサイドでのユーザーデータ操作

- `fetch` を使用して API を呼び出し
- エラーハンドリングとローディング状態の管理:
- ServerActionsでも可

```typescript
// components/articles/create-article.tsx
'use client';

export const createArticle = async (data: ArticleData) => {
  try {
    const response = await fetch('/api/articles', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      throw new Error('API request failed');
    }

    return await response.json();
  } catch (error) {
    console.error('Error creating article:', error);
    throw error;
  }
};
```

### キャッシュと再検証

- デフォルトでキャッシュを活用
- 適切な再検証戦略を選択:

```typescript
// ISRの場合
fetch(url, { next: { revalidate: 3600 } }); // 1時間ごとに再検証

// キャッシュを無効化する場合
fetch(url, { cache: 'no-store' });
```

### エラーハンドリング

- API レスポンスには適切なステータスコードとエラーメッセージを含める
- クライアントサイドでは適切なエラーハンドリングとユーザーフィードバックを実装
- try-catch ブロックを使用して例外を適切に処理

### セキュリティ

- API ルートでは適切な認証・認可チェックを実装
- 入力値のバリデーションを実施、特にサーバーサイドでのバリデーション
- レートリミットの実装を検討

## 4. パフォーマンス最適化

### 画像最適化

- `next/image`コンポーネントを使用

```typescript
import Image from "next/image";

<Image
  src="/path/to/image.jpg"
  alt="説明"
  width={800}
  height={600}
  priority={true} // 重要な画像の場合
/>;
```

### スクリプト最適化

- `next/script`を使用して外部スクリプトを最適化

```typescript
import Script from "next/script";

<Script src="https://example.com/script.js" strategy="lazyOnload" />;
```

## 5. エラーハンドリング

### エラーバウンダリ

- `error.tsx`ファイルでエラーをキャッチ
- ユーザーフレンドリーなエラーメッセージを表示

### ローディング状態

- `loading.tsx`でローディング状態を管理
- Suspense を使用して細かい粒度でローディングを制御

## 6. 型安全性

### TypeScript

- 厳格な型チェックを有効化

```json
{
  "compilerOptions": {
    "strict": true,
    "forceConsistentCasingInFileNames": true
  }
}
```

### API ルート

- リクエスト/レスポンスの型を定義

```typescript
type ResponseData = {
  message: string;
};
```

## 7. セキュリティ

### 環境変数

- 機密情報は`.env`に保存
- 公開する環境変数は`NEXT_PUBLIC_`プレフィックスを使用
- 環境変数は `process.env.xxxxx` で直接使わない。 `src/env.ts` の型チェック後の変数を参照すること。

### CSP (Content Security Policy)

- 適切な CSP ヘッダーを設定
- `next.config.js`でセキュリティヘッダーを構成

## 8. デプロイメント

### ビルド最適化

- 本番環境では常に本番ビルドを使用
- 適切なキャッシュ戦略を実装

### 環境変数

- 環境ごとに適切な環境変数を設定
- 本番環境の環境変数は安全に管理

## 10. メンテナンス

### 依存関係

- 定期的に依存パッケージを更新
- セキュリティ脆弱性をモニタリング

### パフォーマンスモニタリング

- Core Web Vitals を定期的に確認
- エラーログを監視
